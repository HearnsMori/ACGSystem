from localStoragePy import localStoragePy
from datetime import date
import os
import time
import math
from ASystem import asystem
from CSystem import csystem
from GSystem import gsystem

leveltest = 0; #For testing equals to 0 if not test

class MainProgram:
    def __init__(self):
        pass;
    def defVar(self):
        global localStorage, automation, connection, gratification, choices, filename;
        localStorage = localStoragePy('game', 'text')
        automation = 0
        connection = 0
        gratification = 0
        choices = 0
        filename = date.today().strftime("%Y%B%d") + ".txt"
    def initVar(self): 
        global localStorage, automation, connection, gratification, choices, filename;
        if (localStorage.getItem('a')) is not None:
            automation = int(localStorage.getItem('a'));
        if (localStorage.getItem('c')) is not None:
            connection = int(localStorage.getItem('c'));
        if (localStorage.getItem('g')) is not None:
            gratification = int(localStorage.getItem('g'));
    def gaussianDistribution(self, level):
        # Parameters
        mu = 137000**(1/3); #Mean skill level of the population
        sigma = 13.7; #Standard deviation of skill levels in the population
        return (level-mu)/sigma;
    def rightSkewedDistribution(self, Z):
        #Estimated skewed z-score from a converted z-score from assumed normal distributed but a right-skewed distribution
        #Piecewise function
        if Z < -3.5:
            print("Z");
            return Z;   
        elif Z < -3:
            print("A");
            return Z+1.37;
        elif Z <= 0:
            print("B");
            skew_factor = 7;
            return Z+(10/skew_factor);
        elif Z <= 2.7:
            print("C");
            skew_factor = 1; #The larger the milder or slower
            return (Z)**skew_factor;
        else:
            print("D");
            skew_factor = 15;
            return math.exp(Z / skew_factor);
    def z_to_percentile(self, Z):
        # Z-Score to Percentile mapping (Standard Normal Distribution)
        z_percentile_map = {
            -5.0: 0.00003,
            -4.9: 0.00005,
            -4.8: 0.00008,
            -4.7: 0.00013,
            -4.6: 0.00020,
            -4.5: 0.00032,
            -4.4: 0.00050,
            -4.3: 0.00078,
            -4.2: 0.00121,
            -4.1: 0.00186,
            -4.0: 0.00317,
            -3.9: 0.00498,
            -3.8: 0.00744,
            -3.7: 0.01109,
            -3.6: 0.01657,
            -3.5: 0.02398,
            -3.4: 0.03355,
            -3.3: 0.04550,
            -3.2: 0.05994,
            -3.1: 0.07696,
            -3.0: 0.09933,
            -2.9: 0.12234,
            -2.8: 0.15866,
            -2.7: 0.19497,
            -2.6: 0.23688,
            -2.5: 0.28774,
            -2.4: 0.34458,
            -2.3: 0.40317,
            -2.2: 0.46017,
            -2.1: 0.52186,
            -2.0: 0.61791,
            -1.9: 0.70698,
            -1.8: 0.79673,
            -1.7: 0.89251,
            -1.6: 0.97635,
            -1.5: 1.32697,
            -1.4: 1.91498,
            -1.3: 2.81694,
            -1.2: 3.87121,
            -1.1: 5.10852,
            -1.0: 6.68146,
            -0.9: 8.7604,
            -0.8: 11.512,
            -0.7: 15.013,
            -0.6: 19.220,
            -0.5: 23.897,
            -0.4: 28.842,
            -0.3: 33.815,
            -0.2: 38.210,
            -0.1: 42.068,
             0.0: 50.000,
             0.1: 57.932,
             0.2: 61.790,
             0.3: 66.185,
             0.4: 71.158,
             0.5: 76.103,
             0.6: 80.780,
             0.7: 84.987,
             0.8: 88.488,
             0.9: 91.240,
             1.0: 93.318,
             1.1: 94.891,
             1.2: 96.128,
             1.3: 97.183,
             1.4: 98.085,
             1.5: 98.673,
             1.6: 99.023,
             1.7: 99.107,
             1.8: 99.203,
             1.9: 99.293,
             2.0: 99.382,
             2.1: 99.478,
             2.2: 99.539,
             2.3: 99.597,
             2.4: 99.655,
             2.5: 99.712,
             2.6: 99.763,
             2.7: 99.805,
             2.8: 99.841,
             2.9: 99.877,
             3.0: 99.900,
             3.1: 99.923,
             3.2: 99.940,
             3.3: 99.954,
             3.4: 99.966,
             3.5: 99.976,
             3.6: 99.983,
             3.7: 99.989,
             3.8: 99.9926,
             3.9: 99.9950,
             4.0: 99.9968,
             4.1: 99.9981,
             4.2: 99.9988,
             4.3: 99.9992,
             4.4: 99.9995,
             4.5: 99.9997,
             4.6: 99.9998,
             4.7: 99.9999,
             4.8: 99.99992,
             4.9: 99.99995,
             5.0: 99.99997
        }
        # If the Z-score is outside the provided range, approximate further
        if Z <= -5.0:
            return 0.00003;
        elif Z >= 5.0:
            return 99.99997;
        
        # Find the closest lower and upper Z-scores for interpolation
        lower_z = max(k for k in z_percentile_map.keys() if k <= Z);
        upper_z = min(k for k in z_percentile_map.keys() if k >= Z);

        if lower_z == upper_z:
            return z_percentile_map[lower_z];

        # Linear interpolation between the two closest Z-scores
        lower_percentile = z_percentile_map[lower_z];
        upper_percentile = z_percentile_map[upper_z];
    
        # Interpolate
        percentile = lower_percentile + (upper_percentile - lower_percentile) * ((Z - lower_z) / (upper_z - lower_z));
    
        return percentile;
    
    def startProgram(self):
        global localStorage, automation, connection, gratification, choices, filename;
        self.defVar();
        self.initVar();
        while True:
            print("\nAutomation: " + str(automation));
            print("Connection: " + str(connection));
            print("Gratification: " + str(gratification));
            level = (automation*1)+(connection*3)+(gratification*7);
            level = leveltest or level;
            x=0;
            while True:
                level = 1.37**(x);
                if(level >= 300000000):
                    break;
                print(str(level));
                level = level**(1/3);
                levelOfHistoryBest = 300000000**(1/3);
                
                # Calculate the Z-score
                Z = self.gaussianDistribution(level);
                Z = self.rightSkewedDistribution(Z);
                percentile = self.z_to_percentile(Z)
                print(f"Your skills are better than {percentile:.7f}% all human ever existed.")
                x += 1;

            print("\n\tRule 1: Create Automation System with Flow State. Let the action flow, maximizing the results.\n");
            print("\tRule 2: Reflect the Rule 1 using Connection System. Explain as much visualization and key words as possible.\n");
            print("\tRule 3: Rest using Gratification System. Always be in ACG-Gratitude State; A state in which being grateful that ACG System exist.\n");

            print("Choose:\n\t1. Update Skills\n\t2. Automation System\n\t3. Connection System\n\t4. Gratification System\n\t5. Open App\n\t6. Open Trevo\n\t7. Exit");
            choices = int(input());
            if (choices == 1):
                ins = input("A/C/G which cloc to update: ");
                if ins == "A":
                    os.system("scc ~/A");
                    automation = int(input("cloc from A dir: "));
                    localStorage.setItem('a', automation);
                elif ins == "C":
                    os.system("scc ~/C");
                    connection = int(input("cloc from C dir: "));
                    localStorage.setItem('c', connection);
                elif ins == "G":
                    os.system("scc ~/G");
                    gratification = int(input("cloc from G dir: "));
                    localStorage.setItem('g', gratification);
            elif (choices == 2):
                asystem.A();
            elif (choices == 3):
                csystem.C(filename);
            elif (choices == 4):
                gsystem.G(filename);
            elif (choices == 5):
                os.system("am start --user 0 -n com.transsion.XOSLauncher/com.android.launcher3.DynamicVirtualEntryActivity ");
            elif (choices == 6):
                os.system("am start --user 0 -n com.quyetsama.tnotes/com.example.kanban.MainActivity ");
            elif (choices == 7):
                break;

thread = MainProgram();
thread.startProgram();
